# 1이 될 때 까지
'''
  어떠한 수 N이 1이 될 때까지 다음의 두 과정중 하나를 반복적으로 선택하여 수행하려고 합니다.
  단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
  1. N에서 1을 뺍니다.
  2. N에서 K로 나눕니다.
  예를 들어 N이 17, K가 4라고 가정하면 이때 1번의 과정을 한 번 수행하면 N은 16이 됩니다.
  이후에 2번의 과정을 두 번 수행하면 N은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다.
  이는 N을 1로 만드는 최소 횟수입니다.
  N과 K가 주어질 대 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요
'''

N, K = map(int, input().split()) # N, K를 공백을 기준으로 구분하여 입력 받기
# cnt = 0
result = 0
######### 내 풀이 ########
# while N != 1:
#   if N % K != 0:
#     N -= 1
#   else:
#     N /= K
#   cnt += 1

while True:
  # N이 K로 낭=누어 떨어지는 수가 될 때까지 빼기
  target = (N // K) * K
  result += (N - target)
  N = target
  # N이 K보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
  if N < K:
    break
  # k로 나누기
  result += 1
  N //= K

# 마지막으로 남은 수에 대하여 1씩빼기
result += (N - 1)

print(result)


# N의 값을 줄일 때 2이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 많이 줄일 수 있다.

# 정당성 분석
# 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장할까??
# N이 아무리 큰 수여도, K로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있기때문에 1을 빼는것보다 K로 나누는것이 항상 빠르게 N을 줄일수 있다.
# 또한 N은 항상 1에 도달하게 된다(최적의 해 성립)


