# 구현

'''
  흔히 알고리즘 대회에서 구현 유형의 문제란 무엇을 의할까
  풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제를 지칭
  구현 유형의 예시는 다음과 같다
  알고지즘은 간단한데 코드가 지나칠 만큼 길어지는 문제
  실수 연산을 다루고, 특정 소수점 자리까지 출력해야 하는 문제
  문자열을 특정한 기준에 따라서 끌ㄴㅎ어 처리해야 하는 문제
  적절한 라이브러리를 찾아서 사용해야 하는 문제
'''

# 상하좌우

'''
  여행가 A는 N * N 크기의 정사각형 공간 위에 서 있습니다. 이 공간은 1 * 1 크기의 정사각형으로 나우어져 있습니다.
  가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌푠느 (N, N)에 해당합니다.
  여행가 A는 상,하,좌,우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)입니다.
  우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있습니다.

  계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L, R, U, D 중 하나의 문자가 반복적으로 적혀 있습니다.
  각 문자의 의미는 다음과 같습니다.

  L : 왼쪽으로 한 칸 이동
  R : 오른쪽으로 한 칸 이동
  U : 위로 한 칸 이동
  D : 아래로 한 칸 이동

  이때 여행가 A가 N * N 크기의 정사각형 공간을 벗어나는 움직임은 무시됩니다. 예를 들어 (1, 1)의 위치에서 L 혹은 U를 만나면 무시됩니다.
  
'''

n = int(input())
x, y = 1, 1

plans = input().split()

dx = [0,0,-1,1]
dy = [-1,1,0,0]
move_types = ['L', 'R', 'U', 'D']

for plan in plans:
  for i in range(len(move_types)):
    if plan == move_types[i]:
      nx = x + dx[i]
      ny = y + dy[i]
  if nx < 1 or ny < 1 or nx > n or ny > n:
    continue
  x, y = nx, ny

print(x, y)


